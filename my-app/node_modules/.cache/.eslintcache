[{"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\index.js":"1","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\reportWebVitals.js":"2","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\App.js":"3","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\Nav-Bar.js":"4","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\contexts\\MyContext.js":"5","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\index.js":"6","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\LoginButton.jsx":"7","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\LogoutButton.jsx":"8","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\InputFormAuth.jsx":"9","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\AddHorseAuth.jsx":"10","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\InputForm.jsx":"11","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\Register.jsx":"12","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\PredictionHistory.jsx":"13","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\LoginDisplay.jsx":"14","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\PredictionHistoryAuth.jsx":"15","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\AddHorse.jsx":"16","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\ProfileDashboard.jsx":"17","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\DischargeHorse.jsx":"18","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\ProfileDashboardAuth.jsx":"19","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\SpecificPrediction.jsx":"20","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\UpdateHorse.jsx":"21","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\auth0-provider-with-history.js":"22"},{"size":592,"mtime":1639667348692,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1630933696760,"results":"25","hashOfConfig":"24"},{"size":1908,"mtime":1639667079856,"results":"26","hashOfConfig":"24"},{"size":2305,"mtime":1639666483224,"results":"27","hashOfConfig":"24"},{"size":3749,"mtime":1633464789838,"results":"28","hashOfConfig":"24"},{"size":1131,"mtime":1633464789851,"results":"29","hashOfConfig":"24"},{"size":1489,"mtime":1639666134126,"results":"30","hashOfConfig":"24"},{"size":1497,"mtime":1632741701888,"results":"31","hashOfConfig":"24"},{"size":907,"mtime":1639667348691,"results":"32","hashOfConfig":"24"},{"size":963,"mtime":1639667483239,"results":"33","hashOfConfig":"24"},{"size":21400,"mtime":1639667450130,"results":"34","hashOfConfig":"24"},{"size":5256,"mtime":1633464789838,"results":"35","hashOfConfig":"24"},{"size":4795,"mtime":1633464789851,"results":"36","hashOfConfig":"24"},{"size":5643,"mtime":1633464789851,"results":"37","hashOfConfig":"24"},{"size":1315,"mtime":1633370830291,"results":"38","hashOfConfig":"24"},{"size":10363,"mtime":1633461758982,"results":"39","hashOfConfig":"24"},{"size":14726,"mtime":1633464789851,"results":"40","hashOfConfig":"24"},{"size":6179,"mtime":1633461756975,"results":"41","hashOfConfig":"24"},{"size":1014,"mtime":1633286306180,"results":"42","hashOfConfig":"24"},{"size":5727,"mtime":1633464789838,"results":"43","hashOfConfig":"24"},{"size":14734,"mtime":1633535534930,"results":"44","hashOfConfig":"24"},{"size":774,"mtime":1639666660611,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"19w6cls",{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\index.js",[],["99","100"],"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\App.js",["101"],"\nimport React from 'react';\n// Importing the Context Provider & Home Component\nimport MyContextProvider from './contexts/MyContext';\nimport NavBar from './components/Nav-Bar';\nimport { InputFormAuth} from './components';\nimport {PredictionHistoryAuth} from './components';\nimport { LoginDisplay } from './components';\nimport { Register } from './components';\nimport { AddHorseAuth } from './components';\nimport { ProfileDashboardAuth } from './components';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch,Redirect } from \"react-router-dom\";\n\n\n\nfunction App() {\n\n  return (\n\n    //wrap the app in the current context state of the app held in contexts/MyContext (parental component) - allows all other components to access the state values and methods\n    //Useful for accessing login state etc\n    <MyContextProvider>\n\n      {/* Wrap the App in the Router allows components inside to Route to different URLS */}\n      <Router>\n\n        {/* NavBar has no condition to render and it is always displayed. */}\n      <NavBar />\n      \n      <div>\n\n        {/* The Routes are wrapped in a switch which ensures that only the specified component is rendered at each URL */}\n            <Switch>\n\n              {/* Route path specifies the URL and which component should render at that address */}\n                <Route path=\"/\" component={InputFormAuth} exact/>\n                <Route path=\"/dashboard\" component={ProfileDashboardAuth} />\n                <Route path=\"/login\" component={LoginDisplay} />\n                <Route exact path=\"/register\" component={Register} />\n                <Route path=\"/addhorse\" component={AddHorseAuth} />\n                <Route path=\"/history\" component={PredictionHistoryAuth} />\n               \n                <Route component={Error} />\n            </Switch>\n\n        </div>\n\n        </Router>\n        \n    </MyContextProvider>\n  );\n}\n\nexport default App;","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\Nav-Bar.js",[],"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\contexts\\MyContext.js",[],"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\index.js",[],"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\LoginButton.jsx",["102"],"// import React from 'react';\r\n// import { NavLink as RouterNavLink } from \"react-router-dom\";\r\n// import {  Nav } from \"react-bootstrap\";\r\n\r\n\r\n// //creation of a simple button for login\r\n// const Button = () => (\r\n//     <button type=\"button\" class=\"btn btn-outline-primary\">\r\n//         Login\r\n//     </button>\r\n//   );\r\n\r\n// //Wrapping the previously created button in Nav. This allows it to link to a specified url.\r\n// //React is unique in that it does not constantly refresh. It re-renders what changes and keeps what is the same.\r\n// //Nav enables this behavior. Works with the <Switch> and <Router> our components are wrapped in (see App.js)\r\n// const LoginButton = () => (\r\n    \r\n//     <Nav className=\"mr-auto\">\r\n//       <Nav.Link\r\n//       // clicking on the button send the user to url / login\r\n//         as={RouterNavLink}\r\n//         to=\"/login\"\r\n//         exact\r\n//         activeClassName=\"router-link-exact-active\"\r\n//       >\r\n//         <Button />\r\n//       </Nav.Link>\r\n//     </Nav>\r\n    \r\n//     );\r\n\r\n\r\n//     export default LoginButton;\r\n\r\n\r\n// src/components/login-button.js\r\n\r\nimport React from \"react\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst LoginButton = () => {\r\n  const { loginWithRedirect } = useAuth0();\r\n  return (\r\n    <button\r\n      className=\"btn btn-primary btn-block\"\r\n      onClick={() => loginWithRedirect()}\r\n    >\r\n      Log In\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default LoginButton;","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\LogoutButton.jsx",["103"],"import React from 'react';\r\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\r\nimport {  Nav } from \"react-bootstrap\";\r\nimport { useContext } from 'react';\r\nimport {MyContext} from '../contexts/MyContext'\r\n\r\n\r\n\r\n\r\n//creation of a simple button for logout. It has functionality unlike the login button which functions purely as a link.\r\n//It utilises the logout user function for the MyContext.js parental state.\r\nfunction Button(){\r\n\r\n  //importing the logout user method from the parental context file\r\n  const {logoutUser} = useContext(MyContext);\r\n\r\n\r\n  // If user Logged in\r\n  {\r\n      return(\r\n              //when button is pressed, logout the user\r\n              <button type=\"button\" class=\"btn btn-outline-primary\" onClick={logoutUser}>Logout</button>\r\n\r\n      )\r\n  }\r\n}\r\n\r\n\r\n\r\n//Wrapping the previously created button in Nav. This allows it to link to a specified url.\r\n//React is unique in that it does not constantly refresh. It re-renders what changes and keeps what is the same.\r\n//Nav enables this behavior. Works with the <Switch> and <Router> our components are wrapped in (see App.js)\r\n//When the user is logged out they are brought to the home page\r\nconst LogoutButton = () => (\r\n    \r\n    <Nav className=\"mr-auto\">\r\n      <Nav.Link\r\n        as={RouterNavLink}\r\n        \r\n        to=\"/\"\r\n        exact\r\n        activeClassName=\"router-link-exact-active\"\r\n      >\r\n        <Button />\r\n      </Nav.Link>\r\n    </Nav>\r\n    \r\n    );\r\n\r\n\r\n\r\nexport default LogoutButton;\r\n\r\n","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\InputFormAuth.jsx",[],"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\AddHorseAuth.jsx",[],"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\InputForm.jsx",["104","105","106","107","108","109","110","111","112","113"],"import React, { Component } from 'react';\r\nimport './InputForm.css';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap';\r\nimport { MyContext } from '../contexts/MyContext'\r\nimport Axios from 'axios'\r\n\r\n\r\n\r\n\r\n//Reference is taken from : https://towardsdatascience.com/create-a-complete-machine-learning-web-application-using-react-and-flask-859340bddb33\r\n//This template is reversed engineered to suit our application needs\r\n\r\n\r\n\r\n//Creation of form select data. Using for loops to generate numeric array for dropdown form select data control\r\n//Highest and lowest values plus a rough margin above and below\r\n//20.0 - 90.0\r\nvar packed_cell_volumes = []\r\nfor (var i = 20; i <= 90; i = +(i + 1).toFixed(1)) {\r\n  packed_cell_volumes.push(<option key={i} value={i}>{i}</option>);\r\n}\r\n\r\n//Creation of form select data. Using for loops to generate numeric array for dropdown form select data control\r\n//Highest and lowest values plus a rough margin above and below\r\n//30.0 to 200.0\r\nvar pulses = []\r\nfor (var i = 30; i <= 200; i = +(i + 1).toFixed(1)) {\r\n  pulses.push(<option key={i} value={i}>{i}</option>);\r\n}\r\n\r\n\r\n//Creation of form select data. For the form data to present we need to push the html/jsx into an array. It will not display if it is just an array of strings. \r\n//It needs to be fully formatted as the 'select' syntax within the array\r\n//contains 'yes' or 'no'\r\nvar surgical_lesions_values = [\"yes\", \"no\"]\r\nvar surgical_lesions = []\r\nfor (var i = 0; i <= surgical_lesions_values.length - 1; i++) {\r\n  surgical_lesions.push(<option key={surgical_lesions_values[i]} value={surgical_lesions_values[i]}> {surgical_lesions_values[i]} </option>);\r\n}\r\n\r\n//Creation of form select data. For the form data to present we need to push the html/jsx into an array. It will not display if it is just an array of strings. \r\n//It needs to be fully formatted as the 'select' syntax within the array\r\n//contains 'cool', 'normal', 'cold', 'warm'\r\nvar temp_of_extremitiess_values = [\"cold\", \"cool\", \"normal\", \"warm\"]\r\nvar temp_of_extremitiess = []\r\nfor (var i = 0; i <= temp_of_extremitiess_values.length - 1; i++) {\r\n  temp_of_extremitiess.push(<option key={temp_of_extremitiess_values[i]} value={temp_of_extremitiess_values[i]}> {temp_of_extremitiess_values[i]} </option>);\r\n}\r\n\r\n\r\n//Creation of form select data. Using for loops to generate numeric array for dropdown form select data control\r\n//Highest and lowest values plus a rough margin above and below\r\n//1-100\r\nvar total_proteins = []\r\nfor (var i = 1; i <= 100; i = +(i + 1).toFixed(1)) {\r\n  total_proteins.push(<option key={i} value={i}>{i}</option>);\r\n}\r\n\r\n//Creation of form select data. For the form data to present we need to push the html/jsx into an array. It will not display if it is just an array of strings. \r\n//It needs to be fully formatted as the 'select' syntax within the array\r\n//contains 'reduced', 'normal', 'absent' or 'increased'\r\nvar peripheral_pulses_values = [\"absent\", \"reduced\", \"normal\", \"increased\"]\r\nvar peripheral_pulses = []\r\nfor (var i = 0; i <= peripheral_pulses_values.length - 1; i++) {\r\n  peripheral_pulses.push(<option key={peripheral_pulses_values[i]} value={peripheral_pulses_values[i]}> {peripheral_pulses_values[i]} </option>);\r\n}\r\n\r\n//Creation of form select data. For the form data to present we need to push the html/jsx into an array. It will not display if it is just an array of strings. \r\n//It needs to be fully formatted as the 'select' syntax within the array\r\n//contains yes or no\r\nvar surgerys_values = [\"yes\", \"no\"]\r\nvar surgerys = []\r\nfor (var i = 0; i <= surgerys_values.length - 1; i++) {\r\n  surgerys.push(<option key={surgerys_values[i]} value={surgerys_values[i]}> {surgerys_values[i]} </option>);\r\n}\r\n\r\n\r\n\r\n\r\nclass InputForm extends Component {\r\n\r\n  //Importing the MyContext.js state values. We are interested in theUser as we are adding horses specific to the user account.\r\n  //MyContext is acting as a parental component. It passes its prop values down to this component. React is one directional meaning that props \r\n  //cannot be passed back up to the parent.\r\n  static contextType = MyContext;\r\n\r\n\r\n  //constructor defines the initial state\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n\r\n    //default values when app is opened - the default state values\r\n    this.state = {\r\n      //isLoading controls the rendering and method processes\r\n      isLoading: false,\r\n      //horses contains all the horses registered to the logged in account\r\n      horses: [{horse_name : \"Kevin\",  passport_no : \"900000333\", client_name : \"Donald Trump\"}],\r\n      \r\n\r\n      //default values form values - starts empty. Values are altered by the rendered input form below.\r\n      formData: {\r\n        horse_name: 'horse',\r\n        packed_cell_volume: 20,\r\n        pulse: 30,\r\n        surgical_lesion: 'no',\r\n        temp_of_extremities: 'cold',\r\n        total_protein: 5,\r\n        peripheral_pulse: 'normal',\r\n        lesion_1: 0,\r\n        surgery: 'no',\r\n      },\r\n      result: \"\",\r\n      successMsg :\"\"\r\n\r\n    };\r\n    //allows these methods to alter the state of component - the 'result' \r\n    this.handlePredictClick = this.handlePredictClick.bind(this);\r\n    //allows these methods to alter the state of component - the 'horses' array\r\n    this.getHorses = this.getHorses.bind(this);\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  //method gets all of the of the horses registered to the account and adds them to the state of the 'horses' array\r\n  //this is handled in componentWillMount() meaning before any process or rendering begins, getHorses will run. This ensures our array \r\n  //has the horse values before anything else happens\r\n  getHorses = async () => {\r\n\r\n    //gets the login token cookie from our browser local storage. This will only be present if successfully logged in. It is a JWT token.\r\n    const loginToken = localStorage.getItem('loginToken');\r\n\r\n    // If inside the local-storage has the the JWT token (and is therefore logged in)\r\n    if (loginToken) {\r\n\r\n      //Adding JWT token to axios default header - this allows access to the database. For security and access purposes. You need the token to be able \r\n      //to request the API for database information.\r\n      Axios.defaults.headers.common['Authorization'] = 'bearer ' + loginToken;\r\n\r\n      // Fetching the users registered horses\r\n      const { data } = await Axios.get('http://localhost/php-colicapp/user-horses.php');\r\n\r\n      console.log(data)\r\n      console.log(data.user)\r\n\r\n      // If user information is successfully received, add the horses to the 'horses' array in state\r\n      if (data.success && data.user) {\r\n        this.setState({\r\n          ...this.state,\r\n          isAuth: true,\r\n          horses: data.user\r\n\r\n        });\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //sends the prediction to our database\r\n  handlePredictionRecording = () => {\r\n\r\n    //gets the user info from mycontext stat.\r\n    const { rootState } = this.context;\r\n    const { theUser } = rootState;\r\n    console.log(theUser.email)\r\n    this.setState({ isLoading: true });\r\n\r\n    //get time and date assigned to variable\r\n    const today = new Date();\r\n    const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n    const time = today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();\r\n\r\n    //the information that will be posted to our database using axios\r\n    const params = {\r\n\r\n      horse_id: this.state.formData.horse_id,\r\n      user_id: theUser.user_id,\r\n      horse_name: this.state.formData.horse_name,\r\n      prediction: this.state.result,\r\n      date: date,\r\n      time: time,\r\n      packed_cell_volume: this.state.formData.packed_cell_volume,\r\n      pulse: this.state.formData.pulse,\r\n      surgical_lesion: this.state.formData.surgical_lesion,\r\n      temp_of_extremities: this.state.formData.temp_of_extremities,\r\n      total_protein: this.state.formData.total_protein,\r\n      peripheral_pulse: this.state.formData.peripheral_pulse,\r\n      lesion_1: this.state.formData.lesion_1,\r\n      surgery: this.state.formData.surgery\r\n\r\n    };\r\n\r\n    console.log(params.horse_id, params.horse_name,\r\n      params.prediction, params.date, params.time,\r\n      params.packed_cell_volume, params.pulse, params.surgical_lesion,\r\n      params.temp_of_extremities, params.total_protein, params.peripheral_pulse,\r\n      params.lesion_1, params.surgery)\r\n\r\n    //posting our parameters to the php API which will update the sql database\r\n    Axios.post(\"http://localhost/php-colicapp/saveprediction.php\", (params))\r\n      .then((response) => {\r\n        console.log(response.data.message);\r\n        this.setState({successMsg : response.data.message})\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n       \r\n      });\r\n    this.setState({ isLoading: false });\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  //when data changes live on the input form, this function updates the values of our from data\r\n  //this method handles all form changes apart from 'horse_name' and 'horse_id'\r\n  handleChange = (event) => {\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n    var formData = this.state.formData;\r\n    formData[name] = value;\r\n    this.setState({\r\n      formData\r\n    });\r\n  }\r\n\r\n\r\n  //The horses array state now holds all of the horses registered to the logged in account.\r\n  //These are then inputted into a selection dropdown in the input form. This controls data & allows us to assign a better architecture to each horses recording.\r\n  //When the form is submitted, this method attains the value and name of the input field (drop down menu of horses)\r\n  //these two values are used to set the 'horse_id' value\r\n  //A for loop is used to run through the 'horses' array and if the 'horse_id' matches, that specific 'horse_name' is retrieved and then used to change the 'formData'.\r\n  //This method is run every time a new selection is made form the 'horse name' field of our input form. It is real time state update.\r\n  handleChangePickingHorse = (event) => {\r\n\r\n    //When the name selection changes on the input form, the change event retrieves the value and name of the field.\r\n    //These fields allow us to retrieve the 'horse_id' value\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n\r\n    console.log(value);\r\n    console.log(name);\r\n\r\n    //the 'horse_id' value retrieved by the selection change of the 'horse name' field is put through a loop.\r\n    //this loop runs through the 'horses' array. When the matching horse is found, the 'horse_name' is returned.\r\n    const horseName = this.state.horses.map((horse) => {\r\n      if (horse.horse_id === value)\r\n        return horse.horse_name\r\n\r\n    })\r\n\r\n    //above code returns the result in a single value array. We need to parse it into a String value.\r\n    let horseNameString = horseName.toString();\r\n\r\n    //After changing the horseName to a string, it includes the comma of the array structure. This is removed below.\r\n    var horseNameString_ = horseNameString.replace(/,/g, '');\r\n\r\n    console.log(horseNameString_)\r\n\r\n\r\n\r\n    //using the 'user_id' and 'horse_name' values to update our current form state.\r\n    var formData = this.state.formData;\r\n    formData.horse_name = horseNameString_;\r\n    formData.horse_id = value;\r\n    this.setState({\r\n      formData\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n//This method is called when the 'predict' button is clicked.\r\n//The current state of the form data object is created\r\n//fetch is used to retrieve our prediction API that is house in our FLASK virtual environment\r\n//The form data variable is then posted to the API in JSON format.\r\n//The response is then used to update the 'result' state.\r\n//This gets us the prediction result from our current formData state.\r\n\r\n  handlePredictClick = () => {\r\n\r\n    const formData = this.state.formData;\r\n    this.setState({ isLoading: true });\r\n    fetch('http://127.0.0.1:5000/prediction/',\r\n      {\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        method: 'POST',\r\n        body: JSON.stringify(formData)\r\n      })\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        this.setState({\r\n          result: response.result,\r\n          isLoading: false,\r\n\r\n\r\n        });\r\n\r\n      });\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //Cancel click resets our result state to null.\r\n  handleCancelClick = (event) => {\r\n    this.setState({ result: \"\" });\r\n  }\r\n\r\n  //componentWillMount() runs before any other code.  The get account horses into array is the first process to be carried out.\r\n  componentWillMount() {\r\n    this.getHorses();\r\n\r\n  }\r\n\r\n\r\n  //Render of content to browser\r\n  render() {\r\n\r\n\r\n    //creating objects from the current state. This allows access to its values. \r\n    //This can also be done without declaring an object this.state.value eg. \"this.state.horses.map\"\r\n    //Both methods are used.\r\n    const isLoading = this.state.isLoading;\r\n    const formData = this.state.formData;\r\n    const result = this.state.result;\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n\r\n      <Container>\r\n\r\n\r\n        <div>\r\n          <h1 className=\"title\">Colic Predictor</h1>\r\n        </div>\r\n        <div className=\"content\">\r\n          <Form>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Horse Name // Passport Number // Client Name</Form.Label>\r\n                {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'horse_id' and 'horse_name' */}\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.horse_id}\r\n                  name=\"horse_id\"\r\n                  onChange={this.handleChange, this.handleChangePickingHorse}>\r\n                    {/* A loop is used to output the 'horses' array to a drop-down selection menu. Client name and horse passport number are also displayed to \r\n                    make sure horses with the same name can be differentiated  */}\r\n                  <option>Pick Horse</option>\r\n                  {this.state.horses.map((horse) => (\r\n                    <option value={horse.horse_id}>{horse.horse_name}   // {horse.passport_no} //  {horse.client_name}</option>\r\n                  ))}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n\r\n\r\n\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Packed Cell Volume</Form.Label>\r\n                {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'packed_cell_volume' */}\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.packed_cell_volume}\r\n                  name=\"packed_cell_volume\"\r\n                  onChange={this.handleChange}>\r\n                  {packed_cell_volumes}\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Pulse Rate</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.pulse}\r\n                  name=\"pulse\"\r\n                  onChange={this.handleChange}>\r\n                  {pulses}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Surgical Lesion</Form.Label>\r\n                {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'surgical_lesion' */}\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.surgical_lesion}\r\n                  name=\"surgical_lesion\"\r\n                  onChange={this.handleChange}>\r\n                  {surgical_lesions}\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Temp. of Extremities</Form.Label>\r\n                {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'temp_of_extremities' */}\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.temp_of_extremities}\r\n                  name=\"temp_of_extremities\"\r\n                  onChange={this.handleChange}>\r\n                  {temp_of_extremitiess}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Total Protein Count</Form.Label>\r\n                {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'total_protein' */}\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.total_protein}\r\n                  name=\"total_protein\"\r\n                  onChange={this.handleChange}>\r\n                  {total_proteins}\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Peripheral Pulse</Form.Label>\r\n                 {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'peripheral_pulse' */}\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.peripheral_pulse}\r\n                  name=\"peripheral_pulse\"\r\n                  onChange={this.handleChange}>\r\n                  {peripheral_pulses}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Lesion</Form.Label>\r\n                {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'lesion_1' */}\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"lesion_1\"\r\n                  value={formData.lesion_1}\r\n                  onChange={this.handleChange}\r\n                  maxLength=\"6\">\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Surgery</Form.Label>\r\n                {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'surgery' */}\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.surgery}\r\n                  name=\"surgery\"\r\n                  onChange={this.handleChange}>\r\n                  {surgerys}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Row>\r\n              <Col>\r\n              {/* Button is used to run our prediction API through 'handlePredictClick'. If loading, the button text changes to 'Making Prediction' */}\r\n                <Button\r\n                  block\r\n                  variant=\"success\"\r\n                  disabled={isLoading}\r\n                  onClick={!isLoading ? this.handlePredictClick : null}>\r\n                  {isLoading ? 'Making prediction' : 'Predict'}\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n              {/* Button is used to reset the 'result' state output to nothing. This resets the forms result. */}\r\n                <Button\r\n                  block\r\n                  variant=\"danger\"\r\n                  disabled={isLoading}\r\n                  onClick={this.handleCancelClick}>\r\n                  Reset prediction\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n\r\n          {/* If the 'result' state is not null render this : */}\r\n          {result === \"\" ? null :\r\n            (<Row>\r\n              {/* Output result */}\r\n              <Col className=\"result-container\">\r\n                <h5 id=\"result\">Percentage chance of survival : {result}%</h5>\r\n\r\n                 {/* These will appear if a success message or error message state has value  */}\r\n                  <h6>{this.state.successMsg}</h6>\r\n\r\n                {/* Button when clicked sends the prediction to our database. This is done through 'handlePredictionRecording' */}\r\n                  <Button\r\n                    block\r\n                    variant=\"warning\"\r\n                    disabled={isLoading}\r\n                    onClick={this.handlePredictionRecording}>\r\n                    Record Prediciton\r\n                  </Button>\r\n\r\n                \r\n              </Col>\r\n            </Row>)\r\n          }\r\n        </div>\r\n\r\n\r\n      </Container>\r\n\r\n\r\n\r\n\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n//establishing context state for user\r\nInputForm.contextType = MyContext;\r\n\r\n\r\n\r\n//---------------\r\n\r\nexport default InputForm;\r\n","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\Register.jsx",[],"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\PredictionHistory.jsx",[],"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\LoginDisplay.jsx",["114","115"],"import React, { useContext, useState } from 'react'\r\nimport { MyContext } from '../contexts/MyContext'\r\nimport { BrowserRouter as Redirect, Route, Switch } from \"react-router-dom\";\r\nimport InputForm from './InputForm'\r\nimport './LoginDisplay.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n//Functional reference is taken from : https://www.w3jar.com/react-js-php-mysql-db-login-registration-system/\r\n\r\n//Function component to display login form if not logged in, or the prediction form if already logged in.\r\nfunction LoginDisplay() {\r\n\r\n    //Importing the MyContext.js state values. We are interested in isAuth as we are looking to see if the user is signed in. \r\n    //MyContext is acting as a parental component. It passes its prop values down to this component. React is one directional meaning that props \r\n    //cannot be passed back up to the parent.\r\n    const { rootState } = useContext(MyContext);\r\n    const { isAuth } = rootState;\r\n\r\n\r\n    return (\r\n\r\n\r\n        <Route >\r\n\r\n            {/* if the state is Auth = true return input form. If false, show login */}\r\n            {isAuth ? <InputForm /> : <Login />}\r\n\r\n        </Route>\r\n\r\n\r\n    )\r\n\r\n};\r\n\r\n\r\n//This is the login form that takes user input\r\nfunction Login() {\r\n\r\n    //Importing the MyContext.js state values. We are interested in loginUser and isLoggedIn.\r\n    //Login user is a method that sends the userInfo to login.php. If the response is successful a localStorage 'loginToken' is stored.\r\n    //This 'LoginToken' is then to authenticate API requests to our database.\r\n    //MyContext is acting as a parental component. It passes its prop values down to this component. React is one directional meaning that props \r\n    //cannot be passed back up to the parent.\r\n    const {  loginUser, isLoggedIn } = useContext(MyContext);\r\n\r\n     // the initial state of our userInfo. This will change as the user inputs into the form\r\n    const initialState = {\r\n        userInfo: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        errorMsg: '',\r\n        successMsg: '',\r\n    }\r\n\r\n    const [state, setState] = useState(initialState);\r\n\r\n     // On change input value (email & password) update the current state of userInfo\r\n    const onChangeValue = (e) => {\r\n        setState({\r\n            ...state,\r\n            userInfo: {\r\n                ...state.userInfo,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    // On Submit Login From - if successful local store a authenticating loginToken. If unsuccessful, return an error message.\r\n    const submitForm = async (event) => {\r\n        event.preventDefault();\r\n        const data = await loginUser(state.userInfo);\r\n        if (data.success && data.token) {\r\n            setState({\r\n                ...initialState,\r\n            });\r\n            localStorage.setItem('loginToken', data.token);\r\n            await isLoggedIn();\r\n        }\r\n        else {\r\n            setState({\r\n                ...state,\r\n                successMsg: '',\r\n                errorMsg: data.message\r\n            });\r\n        }\r\n    }\r\n\r\n    // Show Message on Error or Success\r\n    let successMsg = '';\r\n    let errorMsg = '';\r\n    if (state.errorMsg) {\r\n        errorMsg = <div className=\"error-msg\">{state.errorMsg}</div>;\r\n    }\r\n    if (state.successMsg) {\r\n        successMsg = <div className=\"success-msg\">{state.successMsg}</div>;\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div>\r\n                <h1 className=\"title\">LOGIN</h1>\r\n            </div>\r\n            <div class=\"contentL\">\r\n                <p class=\" text-center\">To Access Application Please Login</p>\r\n                <form onSubmit={submitForm} noValidate>\r\n                    <div class=\"mb-3\">\r\n                        {/* input name and value is taken to fill out the \"userInfo\" when the form input select value changes in real time */}\r\n                        {/* used to obtain 'email' */}\r\n                        <label for=\"exampleFormControlInput1\" class=\"form-label\">Email address</label>\r\n                        <input class=\"form-control\" name=\"email\" type=\"email\" required placeholder=\"Enter your email\" value={state.userInfo.email} onChange={onChangeValue} />\r\n                    </div>\r\n                    <div class=\"mb-3\">\r\n                         {/* input name and value is taken to fill out the \"userInfo\" when the form input select value changes in real time */}\r\n                        {/* used to obtain 'password' */}\r\n                        <label for=\"exampleFormControlInput1\" class=\"form-label\">Password</label>\r\n                        <input class=\"form-control\" name=\"password\" type=\"password\" required placeholder=\"Enter your password\" value={state.userInfo.password} onChange={onChangeValue} />\r\n                    </div>\r\n                     {/* errorMsg and successMsg start off as \"\" and do not display. Upon form submission these states change and a message outputs */}\r\n                    <p>{errorMsg}</p>\r\n                    {/* Submit type button triggers the form 'onSubmit={SubmitForm}' submitting the current 'userInfo state to login.php*/}\r\n                    <p> {successMsg}</p>\r\n                    {/* Link that is formatted as a button takes us to the register url directory */}\r\n                    <button type=\"submit\" class=\"btn btn-outline-primary form-control\">Login</button>\r\n                    <Link to=\"/register\" type=\"submit\" class=\" topSpace btn btn-outline-primary form-control\">Register</Link>\r\n\r\n                </form>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default LoginDisplay;","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\PredictionHistoryAuth.jsx",[],"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\AddHorse.jsx",[],"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\ProfileDashboard.jsx",["116"],"import React, { useContext } from 'react'\r\nimport Axios from \"axios\";\r\nimport { MyContext } from '../contexts/MyContext'\r\nimport { Component } from 'react';\r\nimport { UpdateHorse } from '.';\r\nimport { SpecificPrediction } from '.';\r\nimport { Container } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { DischargeHorse } from '.';\r\n\r\n\r\n//This is the main page of the user accounts. It is here that horses can be added, a complete history of predictions can be accessed, a list of all current horses are displayed\r\n//and their specific predictions can be viewed. Additionally horses can be deleted, edited and discharged from service.\r\nclass ProfileDashboard extends Component {\r\n\r\n  //Importing the MyContext.js state values. We are interested in theUser as we are retrieving data specific to the user account.\r\n  //MyContext is acting as a parental component. It passes its prop values down to this component. React is one directional meaning that props \r\n  //cannot be passed back up to the parent.\r\n  static contextType = MyContext;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n\r\n\r\n      //holds the horses that our account has saved\r\n      horses: [],\r\n\r\n      //These hold props to be passed to our children components\r\n      //selectedHorseID and selectedHorseNAme passed to SpecificPrediction.jsx component:\r\n      selectedHorseID: \"\",\r\n      selectedHorseName: \"\",\r\n      //used to hold and control the horse id of the selected horse to be discharged. This value also triggers a render condition.\r\n      dischargeValue :\"\",\r\n       //used to hold and control the horse id of the selected horse to be edited. This value also triggers a render condition.\r\n      editHorse: \"\",\r\n    }\r\n\r\n    //allows these methods to alter the state of component\r\n    this.getHorses = this.getHorses.bind(this);\r\n    this.getHorseNameIDValue = this.getHorseNameIDValue.bind(this);\r\n    this.dischargeHorse = this.dischargeHorse.bind(this);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  //method gets all of the of the horses registered to the account and adds them to the state of the 'horses' array\r\n  //this is handled in componentWillMount() meaning before any process or rendering begins, getHorses will run. This ensures our array \r\n  //has the horse values before anything else happens\r\n  getHorses = async () => {\r\n\r\n\r\n    //gets the login token cookie from our browser local storage. This will only be present if successfully logged in. It is a JWT token.\r\n    const loginToken = localStorage.getItem('loginToken');\r\n\r\n    // If inside the local-storage has the the JWT token (and is therefore logged in)\r\n    if (loginToken) {\r\n\r\n      //Adding JWT token to axios default header - this allows access to the database. For security and access purposes. You need the token to be able \r\n      //to request the API for database information.\r\n      Axios.defaults.headers.common['Authorization'] = 'bearer ' + loginToken;\r\n\r\n      // Fetching the users registered horses\r\n      const { data } = await Axios.get('http://localhost/php-colicapp/user-horses.php');\r\n      console.log(data)\r\n\r\n\r\n      console.log(data.user)\r\n\r\n      // If user information is successfully received, add the horses to the 'horses' array in state\r\n      if (data.success && data.user) {\r\n        this.setState({\r\n          ...this.state,\r\n          isAuth: true,\r\n          horses: data.user\r\n\r\n        });\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  //method receives the loop outputted 'horse_id' from the 'horses' array. This is sent by an onclick event of the rendered output.\r\n  //Each horse has a 'delete' button which passes back the the 'horse_id' to the 'deleteHorse' method parameter \r\n  deleteHorse = param => e => {\r\n\r\n    console.log(param)\r\n\r\n    //takes the 'horse_id' from the inputted method parameter and assigns it to an object\r\n    const params = {\r\n\r\n      horse_id: param\r\n\r\n    };\r\n\r\n\r\n    //axios makes a post request to our local server API. It passes the above params. This will delete the horse from the sql database.\r\n    Axios.post(\"http://localhost/php-colicapp/deletehorse.php\", (params))\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    this.setState({ isLoading: false });\r\n\r\n    //rerun the 'getHorses()' - this updates the display - without you would have to refresh the page\r\n    this.getHorses();\r\n\r\n    window.location.reload();\r\n\r\n\r\n  }\r\n\r\n\r\n  //This method is used to set the 'selectedHorseID' and 'selectedHorseName' states. 'SelectHorseID' takes the param 'horse_id' and 'SelectHorseName' takes the param 'horse_name'.\r\n  // 'SelectHorseID' creates a render condition and 'SelectedHorseNAme' allows us to output the selected horses name wherever we need. If this is null, the 'editHorse' and 'dischargeHorse' state is null,\r\n  //the horses array will display, showing all of the registered horses to the account. When there is a 'selectHorseID' state value,\r\n  //the render changes and displays the selected horse's predictions that have been made.\r\n  getHorseNameIDValue = (param, param2) => e => {\r\n\r\n    console.log(param)\r\n\r\n\r\n    this.setState({\r\n      selectedHorseID: param,\r\n      selectedHorseName: param2,\r\n    });\r\n    console.log(this.selectedHorseID)\r\n\r\n  };\r\n\r\n  //Back click set the 'selectedHorseID' state to null, resetting the render from showing the horse-specific predictions to a the default output - the list of registered horses\r\n  handleBackClick = (event) => {\r\n    this.setState({ selectedHorseID: \"\" });\r\n  }\r\n\r\n  //This method is used to set the 'editHorse' state. 'editHorse' takes the param 'horse_id'.\r\n  // 'editHorse' creates a render condition. If this is null, 'dischargeHorse' and the 'selectHorseID' state is null,\r\n  //the horses array will display, showing all of the registered horses to the account. When there is a 'editHorse' state value,\r\n  //the render changes and displays an edit form to change the selected horse information\r\n  editHorseValues = (param) => e => {\r\n\r\n    console.log(param)\r\n\r\n    this.setState({\r\n      editHorse: param,\r\n\r\n    });\r\n    console.log(this.editHorse)\r\n\r\n  };\r\n\r\n    //This method is used to set the 'dischargeValue' state. 'dischargeValue' takes the param 'horse_id'.\r\n  // 'dischargeValue' creates a render condition. If this is null, 'editHorse\" and the 'selectHorseID' state is null,\r\n  //the horses array will display, showing all of the registered horses to the account. When there is a 'dischargeHorse' state value,\r\n  //the render changes and displays 3 buttons to change the current 'status' value of the horses\r\n  dischargeHorse = (param) => e => {\r\n\r\n    console.log(param)\r\n\r\n    this.setState({\r\n      dischargeValue: param,\r\n\r\n    });\r\n    console.log(this.dischargeValue)\r\n\r\n  };\r\n\r\n  handleBackClick = (event) => {\r\n    this.setState({ selectedHorseID: \"\", editHorse: \"\", dischargeValue: \"\" });\r\n  }\r\n\r\n\r\n\r\n  //componentWillMount() runs before any other code. The 'get account horses' into array is the first process to be carried out.\r\n  componentWillMount() {\r\n    this.getHorses();\r\n\r\n  }\r\n\r\n  //controls modal displays\r\n  toggleModal() {\r\n    this.state.setIsOpen(!this.state.isOpen);\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n    //creating objects from the current state. This allows access to its values. \r\n    //This can also be done without declaring an object this.state.value eg. \"this.state.horses.map\"\r\n    //Both methods are used.\r\n    const selectedHorseID = this.state.selectedHorseID;\r\n    const selectedHorseName = this.state.selectedHorseName;\r\n    const editHorse = this.state.editHorse\r\n    const dischargeValue = this.state.dischargeValue\r\n\r\n\r\n    // if no horse value is selected render all available user registered horses\r\n    if (selectedHorseID === \"\" && editHorse === \"\" && dischargeValue ===\"\") {\r\n\r\n\r\n      return (\r\n\r\n        <div>\r\n          <div>\r\n            <h1 className=\"title\">YOUR HORSES</h1>\r\n          </div>\r\n\r\n          <div class=\"container-fluid\">\r\n            <div class=\"row\">\r\n              <div class=\"col-sm  text-center\">\r\n                {/* two buttons that redirect to /addhorse and /history url. /addhorse renders 'AddHorse.jsx' and /history' renders 'PredictionHistory.jsx' */}\r\n                <Link to=\"/addhorse\" class=\"btn spacing btn-default btn btn-dark\">Add Horses </Link>\r\n                <Link to=\"/history\" class=\"btn spacing btn-default btn btn-dark\">See Prediction History </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* table headers */}\r\n          <div class=\"container-fluid\">\r\n            <div class=\"table-responsive-sm \">\r\n              <table class=\"table table-light\">\r\n                <thead class=\"thead-dark\">\r\n                  <tr >\r\n                    <th >Horse Id</th>\r\n                    <th>Horse Name</th>\r\n                    <th>weight (kg)</th>\r\n                    <th>height (cm)</th>\r\n                    <th>Colour</th>\r\n                    <th>HorseBreed</th>\r\n                    <th>Client</th>\r\n                    <th>Status</th>\r\n                    <th>Description</th>\r\n                    <th>Horse Passport Number  </th>\r\n                    <th>  </th>\r\n                    <th>  </th>\r\n                    <th>  </th>\r\n                    <th>  </th>\r\n                  </tr>\r\n                </thead>\r\n\r\n                {/* table values */}\r\n                <tbody >\r\n                  {/* A loop is used to output the 'horses' 2D array into the table contents .  */}\r\n                  {this.state.horses.map((item =>\r\n                    <tr key={item.horseloop} >\r\n                      <td >{item.horse_id}</td>\r\n                      <td>{item.horse_name}</td>\r\n                      <td>{item.weight_kg}</td>\r\n                      <td>{item.height_cm}</td>\r\n                      <td>{item.colour}</td>\r\n                      <td>{item.horse_breed}</td>\r\n                      <td>{item.client_name}</td>\r\n                      <td>{item.status}</td>\r\n                      <td>{item.description}</td>\r\n                      <td>{item.passport_no}</td>\r\n\r\n                      <td>\r\n                        {/* Button sets the state of 'selectedHorseID', establishing the conditional render of the selected horse's predictions */}\r\n                        <button type=\"button\" class=\"btn btn-dark\" onClick={this.getHorseNameIDValue(item.horse_id, item.horse_name)}>\r\n                          See More\r\n                        </button>\r\n                      </td>\r\n\r\n                      <td>\r\n                        {/* Button sets the state of 'editHorse', establishing the conditional render of the edit horse form */}\r\n                        <button type=\"button\" class=\"btn btn-dark\" onClick={this.editHorseValues(item.horse_id)}>\r\n                          Edit Horse\r\n                        </button>\r\n                      </td>\r\n\r\n                      <td>\r\n                        {/* Button to take to delete horse */}\r\n                        <button type=\"button\" class=\"btn btn-dark\" onClick={this.deleteHorse(item.horse_id)}>\r\n                          Remove Horse\r\n                        </button>\r\n                      </td>\r\n\r\n                      <td>\r\n                        {/* Button to take to change value of the selected horse's discharge status */}\r\n                        <button type=\"button\" class=\"btn btn-dark\" onClick={this.dischargeHorse(item.horse_id)}>\r\n                          Discharge Horse\r\n                        </button>\r\n\r\n                      </td>\r\n\r\n\r\n                    </tr>\r\n                  ))}\r\n\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n      )\r\n    }\r\n\r\n\r\n\r\n    else if (selectedHorseID !== \"\" && editHorse === \"\" && dischargeValue === \"\") {\r\n\r\n      return (\r\n\r\n        <div>\r\n          <Container>\r\n            {/* render this when the this.state.selectedHorseID has value and this.state.editHorse and this.state.dischargeHorse has no value. It is passing the 'selectHorseID' as a prop to the component*/}\r\n            <SpecificPrediction selectedHorseID={selectedHorseID} selectedHorseName={selectedHorseName} />\r\n            {/* Button resets this.state.selectHorse to \"\" causing the other condition value to render (list of all horses that are on the account) */}\r\n            <div class=\"container\">\r\n              <div class=\"row\">\r\n                <div class=\"col text-center\">\r\n                  <button onClick={this.handleBackClick} class=\"btn btn-default btn btn-dark spacing\">Back </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n          </Container>\r\n        </div>\r\n\r\n      )\r\n    }\r\n\r\n    else if (selectedHorseID === \"\" && editHorse !== \"\" && dischargeValue === \"\") {\r\n\r\n      return (\r\n\r\n        <div>\r\n          <Container>\r\n            {/* render this when the this.state.selectedHorseID and this.state.dischargeValue has no value and this.state.editHorse has value. It is passing the 'editHorse' as a prop to the component */}\r\n            <UpdateHorse editHorse={editHorse} />\r\n            {/* Button resets this.state.editHorse to \"\" causing the other condition value to render (list of all horses that are on the account) */}\r\n            <div class=\"container\">\r\n              <div class=\"row\">\r\n                <div class=\"col text-center\">\r\n                  <button onClick={this.handleBackClick} class=\"btn btn-default btn btn-dark spacing\">Back </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n          </Container>\r\n        </div>\r\n\r\n      )\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    else if (selectedHorseID === \"\" && editHorse === \"\" && dischargeValue !== \"\") {\r\n\r\n      return (\r\n\r\n        <div>\r\n          <Container>\r\n            {/* render this when the this.state.selectedHorseID and this.state.editHorse has no value and this.state.dischargeValue has value. It is passing the 'dischargeValue' as a prop to the component */}\r\n            <DischargeHorse dischargeValue={dischargeValue} />\r\n            {/* Button resets this.state.dischargeValue to \"\" causing the other condition value to render (list of all horses that are on the account) */}\r\n            <div class=\"container\">\r\n              <div class=\"row\">\r\n                <div class=\"col text-center\">\r\n                  <button onClick={this.handleBackClick} class=\"btn btn-default btn btn-dark spacing\">Back </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n          </Container>\r\n        </div>\r\n\r\n      )\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n  }\r\n}\r\n\r\n//establishing context state for user\r\nProfileDashboard.contextType = MyContext;\r\n\r\nexport default ProfileDashboard;\r\n\r\n\r\n\r\n","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\DischargeHorse.jsx",[],"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\ProfileDashboardAuth.jsx",[],"C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\SpecificPrediction.jsx",["117","118"],"import { Component } from \"react\";\r\nimport React from 'react';\r\nimport Axios from \"axios\";\r\nimport {CSVLink} from 'react-csv';\r\n\r\n\r\n\r\n//Outputs the predictions of only the selected horse\r\nclass SpecificPrediction extends Component {\r\n\r\n    //creating component state\r\n    state = {\r\n\r\n      //These hold props that has been passed from the parental file 'ProfileDashboard.jsx'\r\n      //These values are passed to allow us to get the predictions of a specific horse\r\n       selectedHorseID : this.props.selectedHorseID,\r\n       selectedHorseName : this.props.selectedHorseName,\r\n\r\n       //array to hold all horse predictions\r\n       predictions: [],\r\n\r\n    }\r\n\r\n    \r\n\r\n//method gets all of the of the predictions registered to the account and adds them to the state of the 'predictions' array\r\n  //this is handled in componentWillMount() meaning before any process or rendering begins, getPredict will run. This ensures our array \r\n  //has the prediction values before anything else happens\r\n    getPredict = async () => {\r\n\r\n         //gets the login token cookie from our browser local storage. This will only be present if successfully logged in. It is a JWT token.\r\n        const loginToken = localStorage.getItem('loginToken');\r\n    \r\n      \r\n           // If inside the local-storage has the the JWT token (and is therefore logged in)\r\n        if (loginToken) {\r\n    \r\n          //Adding JWT token to axios default header - this allows access to the database. For security and access purposes. You need the token to be able \r\n      //to request the API for database information.\r\n          Axios.defaults.headers.common['Authorization'] = 'bearer ' + loginToken;\r\n    \r\n          // Fetching the user information\r\n          const { data } = await Axios.get('http://localhost/php-colicapp/user-predictions.php');\r\n          console.log(data)\r\n    \r\n      \r\n          console.log(data.user)\r\n    \r\n          // If user information is successfully received, add the predictions to the 'predictions' array in state\r\n          if (data.success && data.user) {\r\n            this.setState({\r\n              ...this.state,\r\n              isAuth: true,\r\n              predictions: data.user\r\n    \r\n            });\r\n          }\r\n    \r\n        }\r\n    \r\n      }\r\n    \r\n     //componentWillMount() runs before any other code. The account prediction array is the first process to be carried out.\r\n      componentWillMount() {\r\n        this.getPredict();\r\n       \r\n    \r\n      }\r\n      \r\n\r\n\r\n    render() {\r\n\r\n      //creating variable to hold the horse_id that has been given to us by the parent list\r\n        const selectedHorseName = this.state.selectedHorseName;\r\n\r\n        //creating an array to hold the matching 'horse_id' prediction results. We have to place the mapped array within an array object.\r\n        // We do this to prevent null values being pushed into the array.\r\n        const array = []\r\n\r\n        //loop that takes the 'predictions' state and adds matching 'horse_id' predictions to the above array. This will be used to present results below\r\n        const values = this.state.predictions.map((predicition) => {if(predicition.horse_id === this.state.selectedHorseID)\r\n          array.push(predicition)\r\n  })\r\n\r\n      \r\n\r\n\r\n          return(\r\n\r\n            \r\n\r\n           <div>\r\n             {/* horse name variable used to output the selected horses name that we are viewing the predictions of*/}\r\n              <h3 className=\"title\">{selectedHorseName}</h3>\r\n              \r\n\r\n              <div class=\"container-fluid\">\r\n            <div class=\"table-responsive-sm \">\r\n              <table class=\"table table-light\">\r\n                <thead class=\"thead-dark\">\r\n               <tr>\r\n                  <th>Prediction ID</th>\r\n                 <th>Horse ID</th>\r\n                 <th>Horse Name</th>\r\n                 <th>Survival Chance</th>\r\n                 <th>Date</th>\r\n                 <th>Time</th>\r\n                 <th>Packed Cell Volume</th>\r\n                 <th>Pulse</th>\r\n                 <th>Surgical Lesion</th>\r\n                 <th>Temperature of Extremities</th>\r\n                 <th>Total Protein</th>\r\n                 <th>Peripheral Pulse</th>\r\n                 <th>Lesion 1</th>\r\n                 <th>Surgery</th>\r\n                \r\n               </tr>\r\n             </thead>\r\n             {/* table values */}\r\n             <tbody>\r\n                {/* A loop is used to output the 'array' 2D array into the table contents .  */}\r\n               {array.map((item =>\r\n                 <tr key={item.predicition_id} >\r\n                   <td>{item.prediction_id}</td>\r\n                   <td>{item.horse_id}</td>\r\n                   <td>{item.horse_name}</td>\r\n                   <td><b>{item.prediction}%</b></td>\r\n                   <td>{item.date}</td>\r\n                   <td>{item.time}</td>\r\n                   <td>{item.packed_cell_volume}</td>\r\n                   <td>{item.pulse}</td>\r\n                   <td>{item.surgical_lesion}</td>\r\n                   <td>{item.temp_of_extremities}</td>\r\n                   <td>{item.total_protein}</td>\r\n                   <td>{item.peripheral_pulse}</td>\r\n                   <td>{item.lesion_1}</td>\r\n                   <td>{item.surgery}</td>\r\n                   \r\n\r\n                 \r\n                 </tr>\r\n               ))}\r\n               \r\n             </tbody>\r\n \r\n           </table>\r\n           </div>\r\n           {/* Allows download of output data in csv format */}\r\n           <p>\r\n           <CSVLink data={array} >Download me</CSVLink>\r\n           </p>\r\n            \r\n         </div>\r\n\r\n\r\n\r\n\r\n\r\n           \r\n\r\n\r\n            </div>\r\n   \r\n  \r\n  \r\n      \r\n        )\r\n    }\r\n        }\r\n\r\n\r\n\r\nexport default SpecificPrediction;","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\components\\UpdateHorse.jsx",["119"],"import Axios from \"axios\";\r\nimport React, { Component } from 'react';\r\nimport './InputForm.css';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\n//A form that presents the current values of the selected horse to be changed. \r\n//The new values are edited in and then saved.\r\nclass UpdateHorse extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            isLoading: false,\r\n            preload: true,\r\n            editHorse: this.props.editHorse,\r\n            horses: [],\r\n            selectedHorseInfo: {\r\n\r\n                horse_id: \"\",\r\n                horse_name: \"\",\r\n                weight_kg: \"\",\r\n                height_cm: \"\",\r\n                colour: \"\",\r\n                description: \"\",\r\n                horse_breed: \"\",\r\n                client_name: \"\",\r\n                status: 'Under Supervision',\r\n                passport_no: \"\",\r\n            },\r\n\r\n        }\r\n    }\r\n\r\n\r\n    //gets all horses that have been predicted with a matching userid gotten from the loginToken\r\n    getHorses = async () => {\r\n\r\n\r\n\r\n        const loginToken = localStorage.getItem('loginToken');\r\n\r\n        // If inside the local-storage has the JWT token\r\n        if (loginToken) {\r\n\r\n            //Adding JWT token to axios default header\r\n            Axios.defaults.headers.common['Authorization'] = 'bearer ' + loginToken;\r\n\r\n            // Fetching the user information\r\n            const { data } = await Axios.get('http://localhost/php-colicapp/user-horses.php');\r\n            console.log(data)\r\n\r\n            //holds the result array\r\n            console.log(data.user)\r\n\r\n            // If user information is successfully received, add the horses to the 'horses' array in state\r\n            if (data.success && data.user) {\r\n                this.setState({\r\n                    ...this.state,\r\n                    isAuth: true,\r\n                    horses: data.user\r\n\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n        //creating a new array to hold the 2D array of the selected horse\r\n        const horseArray = [];\r\n\r\n        //a map loop is run through all of the users horses to match find the selected 'editHorse'. This is then pushed into the above array 'horseArray'\r\n        this.state.horses.map((horse) => {\r\n            if (horse.horse_id === this.state.editHorse)\r\n                horseArray.push(horse)\r\n        })\r\n\r\n\r\n        console.log(horseArray)\r\n\r\n        //using the selected horse's  2D array values to set the 'selectedHorseInfo' state.\r\n        this.setState({\r\n            selectedHorseInfo: {\r\n\r\n                horse_id: this.state.editHorse,\r\n                horse_name: horseArray[0].horse_name,\r\n                weight_kg: horseArray[0].weight_kg,\r\n                height_cm: horseArray[0].height_cm,\r\n                colour: horseArray[0].colour,\r\n                description: horseArray[0].description,\r\n                horse_breed: horseArray[0].horse_breed,\r\n                client_name: horseArray[0].client_name,\r\n                status: 'Under Supervision',\r\n                passport_no: horseArray[0].passport_no\r\n\r\n\r\n            }\r\n        })\r\n\r\n        console.log(this.state.selectedHorseInfo)\r\n\r\n\r\n\r\n        this.setState({ preload: false });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //sends the prediction to our database. If successful, this will update the horse's details.\r\n    updateHorse = () => {\r\n\r\n\r\n        this.setState({ isLoading: true });\r\n\r\n\r\n        //the information that will be posted to our database using axios. It reflects the current state of the 'selectedHorseInfo'\r\n        const params = {\r\n\r\n            horse_id: this.state.editHorse,\r\n            horse_name: this.state.selectedHorseInfo.horse_name,\r\n            weight_kg: this.state.selectedHorseInfo.weight_kg,\r\n            height_cm: this.state.selectedHorseInfo.height_cm,\r\n            colour: this.state.selectedHorseInfo.colour,\r\n            description: this.state.selectedHorseInfo.description,\r\n            horse_breed: this.state.selectedHorseInfo.horse_breed,\r\n            client_name: this.state.selectedHorseInfo.client_name,\r\n            status: 'Under Supervision',\r\n            passport_no: this.state.selectedHorseInfo.passport_no\r\n\r\n\r\n\r\n        };\r\n\r\n        console.log(params.horse_name, params.weight_kg,\r\n            params.height_cm, params.colour, params.description,\r\n            params.horse_breed, params.client_name, params.user_id,\r\n            params.status, params.passport_no)\r\n\r\n        //posting our parameters to the php which will update our sql database\r\n        Axios.post(\"http://localhost/php-colicapp/updatehorse.php\", (params))\r\n            .then((response) => {\r\n                console.log(response);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n        this.setState({ isLoading: false });\r\n\r\n        //refresh the window and bring the user back to the dashboard\r\n        window.location.reload();\r\n\r\n    }\r\n\r\n\r\n    //when data changes live on the input form, this function updates the values of our from data\r\n    //this method handles all form changes apart from 'status'\r\n    handleChange = (event) => {\r\n        const value = event.target.value;\r\n        const name = event.target.name;\r\n        var selectedHorseInfo = this.state.selectedHorseInfo;\r\n        selectedHorseInfo[name] = value;\r\n        this.setState({\r\n            selectedHorseInfo\r\n        });\r\n    }\r\n\r\n    //componentWillMount() runs before any other code. The 'get account horses' into array is the first process to be carried out.\r\n    componentWillMount() {\r\n        this.getHorses();\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        //creating variables to hold the isLoading and selectedHorseInfo states \r\n        const isLoading = this.state.isLoading;\r\n        const selectedHorseInfo = this.state.selectedHorseInfo;\r\n\r\n        //if the isLoading state is true render this\r\n        if (this.state.preload === true || this.state.isLoading === true) {\r\n            return (\r\n                <h1>loading</h1>\r\n            )\r\n        }\r\n\r\n        //if not loading render this:\r\n        else\r\n\r\n            return (\r\n\r\n\r\n\r\n                <div>\r\n                    <Container>\r\n                        <div>\r\n                            <h1 className=\"title\">UPDATE HORSE</h1>\r\n                        </div>\r\n                        <div className=\"content\">\r\n\r\n                            <Form>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Horse Name</Form.Label>\r\n                                        {/* This updates the selectedHorseInfo state as the input value is changed */}\r\n                                        {/* used to update 'horse_name' state */}\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"horse_name\"\r\n                                            value={selectedHorseInfo.horse_name}\r\n                                            onChange={this.handleChange}\r\n                                            maxLength=\"25\">\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Horse Passport Number</Form.Label>\r\n                                        {/* This updates the selectedHorseInfo state as the input value is changed */}\r\n                                        {/* used to update 'passport_no' state */}\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"passport_no\"\r\n                                            value={selectedHorseInfo.passport_no}\r\n                                            onChange={this.handleChange}\r\n                                            maxLength=\"15\">\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                </Form.Row>\r\n\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Weight in Kilograms</Form.Label>\r\n                                        {/* This updates the selectedHorseInfo state as the input value is changed */}\r\n                                        {/* used to update 'weight_kg' state */}\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            value={selectedHorseInfo.weight_kg}\r\n                                            name=\"weight_kg\"\r\n                                            onChange={this.handleChange}\r\n                                            maxLength=\"3\">\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Height in Centremetres</Form.Label>\r\n                                        {/* This updates the selectedHorseInfo state as the input value is changed */}\r\n                                        {/* used to update 'height_cm' state */}\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            value={selectedHorseInfo.height_cm}\r\n                                            name=\"height_cm\"\r\n                                            onChange={this.handleChange}\r\n                                            maxLength=\"3\">\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Horse Colour</Form.Label>\r\n                                        {/* This updates the selectedHorseInfo state as the input value is changed */}\r\n                                        {/* used to update 'colour' state */}\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            value={selectedHorseInfo.colour}\r\n                                            name=\"colour\"\r\n                                            onChange={this.handleChange}\r\n                                            maxLength=\"10\">\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Description</Form.Label>\r\n                                        {/* This updates the selectedHorseInfo state as the input value is changed */}\r\n                                        {/* used to update 'description' state */}\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            value={selectedHorseInfo.description}\r\n                                            name=\"description\"\r\n                                            onChange={this.handleChange}\r\n                                            maxLength=\"200\">\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Horse Breed</Form.Label>\r\n                                        {/* This updates the selectedHorseInfo state as the input value is changed */}\r\n                                        {/* used to update 'horse_breed' state */}\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            value={selectedHorseInfo.horse_breed}\r\n                                            name=\"horse_breed\"\r\n                                            onChange={this.handleChange}\r\n                                            maxLength=\"20\">\r\n\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Client Name</Form.Label>\r\n                                        {/* This updates the selectedHorseInfo state as the input value is changed */}\r\n                                        {/* used to update 'client_name' state */}\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            value={selectedHorseInfo.client_name}\r\n                                            name=\"client_name\"\r\n                                            onChange={this.handleChange}\r\n                                            maxLength=\"40\">\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n\r\n\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Button\r\n                                            block\r\n                                            variant=\"success\"\r\n                                            disabled={isLoading}\r\n                                            onClick={!isLoading ? this.updateHorse : null}>\r\n                                            {/* when the horse is successfully updated, the form will refresh redirecting to the dashboard */}\r\n                                            {isLoading ? 'Update Horse Value' : 'Update Horse Values'}\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Form>\r\n\r\n                        </div>\r\n\r\n                    </Container>\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default UpdateHorse;","C:\\Users\\oscar\\Dropbox\\Semester 3\\Colic Web App\\40316282_FINAL\\my-app\\src\\auth0-provider-with-history.js",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":13,"column":49,"nodeType":"126","messageId":"127","endLine":13,"endColumn":57},{"ruleId":"124","severity":1,"message":"128","line":40,"column":10,"nodeType":"126","messageId":"127","endLine":40,"endColumn":16},{"ruleId":"129","severity":1,"message":"130","line":19,"column":3,"nodeType":"131","messageId":"132","endLine":25,"endColumn":4},{"ruleId":"133","severity":1,"message":"134","line":33,"column":10,"nodeType":"126","messageId":"135","endLine":33,"endColumn":11},{"ruleId":"133","severity":1,"message":"134","line":43,"column":10,"nodeType":"126","messageId":"135","endLine":43,"endColumn":11},{"ruleId":"133","severity":1,"message":"134","line":52,"column":10,"nodeType":"126","messageId":"135","endLine":52,"endColumn":11},{"ruleId":"133","severity":1,"message":"134","line":61,"column":10,"nodeType":"126","messageId":"135","endLine":61,"endColumn":11},{"ruleId":"133","severity":1,"message":"134","line":70,"column":10,"nodeType":"126","messageId":"135","endLine":70,"endColumn":11},{"ruleId":"133","severity":1,"message":"134","line":79,"column":10,"nodeType":"126","messageId":"135","endLine":79,"endColumn":11},{"ruleId":"136","severity":1,"message":"137","line":262,"column":53,"nodeType":"138","messageId":"139","endLine":262,"endColumn":55},{"ruleId":"140","severity":1,"message":"141","line":380,"column":46,"nodeType":"142","messageId":"143","endLine":380,"endColumn":47},{"ruleId":"144","severity":1,"message":"145","line":385,"column":70,"nodeType":"146","messageId":"147","endLine":385,"endColumn":76},{"ruleId":"144","severity":1,"message":"145","line":385,"column":95,"nodeType":"146","messageId":"147","endLine":385,"endColumn":100},{"ruleId":"124","severity":1,"message":"125","line":3,"column":27,"nodeType":"126","messageId":"127","endLine":3,"endColumn":35},{"ruleId":"124","severity":1,"message":"148","line":3,"column":44,"nodeType":"126","messageId":"127","endLine":3,"endColumn":50},{"ruleId":"124","severity":1,"message":"149","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":27},{"ruleId":"124","severity":1,"message":"150","line":82,"column":15,"nodeType":"126","messageId":"127","endLine":82,"endColumn":21},{"ruleId":"136","severity":1,"message":"151","line":82,"column":65,"nodeType":"138","messageId":"152","endLine":82,"endColumn":67},{"ruleId":"136","severity":1,"message":"151","line":77,"column":39,"nodeType":"138","messageId":"152","endLine":77,"endColumn":41},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-redeclare","'i' is already defined.","redeclared","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","putCommentInBraces","'Switch' is defined but never used.","'useContext' is defined but never used.","'values' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-global-assign","no-unsafe-negation"]