{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oscar\\\\Dropbox\\\\Semester 3\\\\Colic Web App\\\\40316282_FINAL\\\\my-app\\\\src\\\\components\\\\InputForm.jsx\";\nimport React, { Component } from 'react';\nimport './InputForm.css';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap';\nimport { MyContext } from '../contexts/MyContext';\nimport Axios from 'axios'; //Reference is taken from : https://towardsdatascience.com/create-a-complete-machine-learning-web-application-using-react-and-flask-859340bddb33\n//This template is reversed engineered to suit our application needs\n//Creation of form select data. Using for loops to generate numeric array for dropdown form select data control\n//Highest and lowest values plus a rough margin above and below\n//20.0 - 90.0\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar packed_cell_volumes = [];\n\nfor (var i = 20; i <= 90; i = +(i + 1).toFixed(1)) {\n  packed_cell_volumes.push( /*#__PURE__*/_jsxDEV(\"option\", {\n    value: i,\n    children: i\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 28\n  }, this));\n} //Creation of form select data. Using for loops to generate numeric array for dropdown form select data control\n//Highest and lowest values plus a rough margin above and below\n//30.0 to 200.0\n\n\nvar pulses = [];\n\nfor (var i = 30; i <= 200; i = +(i + 1).toFixed(1)) {\n  pulses.push( /*#__PURE__*/_jsxDEV(\"option\", {\n    value: i,\n    children: i\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 15\n  }, this));\n} //Creation of form select data. For the form data to present we need to push the html/jsx into an array. It will not display if it is just an array of strings. \n//It needs to be fully formatted as the 'select' syntax within the array\n//contains 'yes' or 'no'\n\n\nvar surgical_lesions_values = [\"yes\", \"no\"];\nvar surgical_lesions = [];\n\nfor (var i = 0; i <= surgical_lesions_values.length - 1; i++) {\n  surgical_lesions.push( /*#__PURE__*/_jsxDEV(\"option\", {\n    value: surgical_lesions_values[i],\n    children: [\" \", surgical_lesions_values[i], \" \"]\n  }, surgical_lesions_values[i], true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 25\n  }, this));\n} //Creation of form select data. For the form data to present we need to push the html/jsx into an array. It will not display if it is just an array of strings. \n//It needs to be fully formatted as the 'select' syntax within the array\n//contains 'cool', 'normal', 'cold', 'warm'\n\n\nvar temp_of_extremitiess_values = [\"cold\", \"cool\", \"normal\", \"warm\"];\nvar temp_of_extremitiess = [];\n\nfor (var i = 0; i <= temp_of_extremitiess_values.length - 1; i++) {\n  temp_of_extremitiess.push( /*#__PURE__*/_jsxDEV(\"option\", {\n    value: temp_of_extremitiess_values[i],\n    children: [\" \", temp_of_extremitiess_values[i], \" \"]\n  }, temp_of_extremitiess_values[i], true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 29\n  }, this));\n} //Creation of form select data. Using for loops to generate numeric array for dropdown form select data control\n//Highest and lowest values plus a rough margin above and below\n//1-100\n\n\nvar total_proteins = [];\n\nfor (var i = 1; i <= 100; i = +(i + 1).toFixed(1)) {\n  total_proteins.push( /*#__PURE__*/_jsxDEV(\"option\", {\n    value: i,\n    children: i\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 23\n  }, this));\n} //Creation of form select data. For the form data to present we need to push the html/jsx into an array. It will not display if it is just an array of strings. \n//It needs to be fully formatted as the 'select' syntax within the array\n//contains 'reduced', 'normal', 'absent' or 'increased'\n\n\nvar peripheral_pulses_values = [\"absent\", \"reduced\", \"normal\", \"increased\"];\nvar peripheral_pulses = [];\n\nfor (var i = 0; i <= peripheral_pulses_values.length - 1; i++) {\n  peripheral_pulses.push( /*#__PURE__*/_jsxDEV(\"option\", {\n    value: peripheral_pulses_values[i],\n    children: [\" \", peripheral_pulses_values[i], \" \"]\n  }, peripheral_pulses_values[i], true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 26\n  }, this));\n} //Creation of form select data. For the form data to present we need to push the html/jsx into an array. It will not display if it is just an array of strings. \n//It needs to be fully formatted as the 'select' syntax within the array\n//contains yes or no\n\n\nvar surgerys_values = [\"yes\", \"no\"];\nvar surgerys = [];\n\nfor (var i = 0; i <= surgerys_values.length - 1; i++) {\n  surgerys.push( /*#__PURE__*/_jsxDEV(\"option\", {\n    value: surgerys_values[i],\n    children: [\" \", surgerys_values[i], \" \"]\n  }, surgerys_values[i], true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 17\n  }, this));\n}\n\nclass InputForm extends Component {\n  //Importing the MyContext.js state values. We are interested in theUser as we are adding horses specific to the user account.\n  //MyContext is acting as a parental component. It passes its prop values down to this component. React is one directional meaning that props \n  //cannot be passed back up to the parent.\n  //constructor defines the initial state\n  constructor(props) {\n    super(props); //default values when app is opened - the default state values\n\n    this.getHorses = async () => {\n      //gets the login token cookie from our browser local storage. This will only be present if successfully logged in. It is a JWT token.\n      const loginToken = localStorage.getItem('loginToken'); // If inside the local-storage has the the JWT token (and is therefore logged in)\n\n      if (loginToken) {\n        //Adding JWT token to axios default header - this allows access to the database. For security and access purposes. You need the token to be able \n        //to request the API for database information.\n        Axios.defaults.headers.common['Authorization'] = 'bearer ' + loginToken; // Fetching the users registered horses\n\n        const {\n          data\n        } = await Axios.get('http://localhost/php-colicapp/user-horses.php');\n        console.log(data);\n        console.log(data.user); // If user information is successfully received, add the horses to the 'horses' array in state\n\n        if (data.success && data.user) {\n          this.setState({ ...this.state,\n            isAuth: true,\n            horses: data.user\n          });\n        }\n      }\n    };\n\n    this.handlePredictionRecording = () => {\n      //gets the user info from mycontext stat.\n      const {\n        rootState\n      } = this.context;\n      const {\n        theUser\n      } = rootState;\n      console.log(theUser.email);\n      this.setState({\n        isLoading: true\n      }); //get time and date assigned to variable\n\n      const today = new Date();\n      const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n      const time = today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds(); //the information that will be posted to our database using axios\n\n      const params = {\n        horse_id: this.state.formData.horse_id,\n        user_id: theUser.user_id,\n        horse_name: this.state.formData.horse_name,\n        prediction: this.state.result,\n        date: date,\n        time: time,\n        packed_cell_volume: this.state.formData.packed_cell_volume,\n        pulse: this.state.formData.pulse,\n        surgical_lesion: this.state.formData.surgical_lesion,\n        temp_of_extremities: this.state.formData.temp_of_extremities,\n        total_protein: this.state.formData.total_protein,\n        peripheral_pulse: this.state.formData.peripheral_pulse,\n        lesion_1: this.state.formData.lesion_1,\n        surgery: this.state.formData.surgery\n      };\n      console.log(params.horse_id, params.horse_name, params.prediction, params.date, params.time, params.packed_cell_volume, params.pulse, params.surgical_lesion, params.temp_of_extremities, params.total_protein, params.peripheral_pulse, params.lesion_1, params.surgery); //posting our parameters to the php API which will update the sql database\n\n      Axios.post(\"http://localhost/php-colicapp/saveprediction.php\", params).then(response => {\n        console.log(response.data.message);\n        this.setState({\n          successMsg: response.data.message\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n      this.setState({\n        isLoading: false\n      });\n    };\n\n    this.handleChange = event => {\n      const value = event.target.value;\n      const name = event.target.name;\n      var formData = this.state.formData;\n      formData[name] = value;\n      this.setState({\n        formData\n      });\n    };\n\n    this.handleChangePickingHorse = event => {\n      //When the name selection changes on the input form, the change event retrieves the value and name of the field.\n      //These fields allow us to retrieve the 'horse_id' value\n      const value = event.target.value;\n      const name = event.target.name;\n      console.log(value);\n      console.log(name); //the 'horse_id' value retrieved by the selection change of the 'horse name' field is put through a loop.\n      //this loop runs through the 'horses' array. When the matching horse is found, the 'horse_name' is returned.\n\n      const horseName = this.state.horses.map(horse => {\n        if (horse.horse_id === value) return horse.horse_name;\n      }); //above code returns the result in a single value array. We need to parse it into a String value.\n\n      let horseNameString = horseName.toString(); //After changing the horseName to a string, it includes the comma of the array structure. This is removed below.\n\n      var horseNameString_ = horseNameString.replace(/,/g, '');\n      console.log(horseNameString_); //using the 'user_id' and 'horse_name' values to update our current form state.\n\n      var formData = this.state.formData;\n      formData.horse_name = horseNameString_;\n      formData.horse_id = value;\n      this.setState({\n        formData\n      });\n    };\n\n    this.handlePredictClick = () => {\n      const formData = this.state.formData;\n      this.setState({\n        isLoading: true\n      });\n      fetch('http://127.0.0.1:5000/prediction/', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(formData)\n      }).then(response => response.json()).then(response => {\n        this.setState({\n          result: response.result,\n          isLoading: false\n        });\n      });\n    };\n\n    this.handleCancelClick = event => {\n      this.setState({\n        result: \"\"\n      });\n    };\n\n    this.state = {\n      //isLoading controls the rendering and method processes\n      isLoading: false,\n      //horses contains all the horses registered to the logged in account\n      //HARD CODED FOR DEMO PURPOSES\n      horses: [{\n        horse_name: \"Kevin\",\n        passport_no: \"900000333\",\n        client_name: \"Donald Trump\"\n      }],\n      //default values form values - starts empty. Values are altered by the rendered input form below.\n      formData: {\n        horse_name: 'horse',\n        packed_cell_volume: 20,\n        pulse: 30,\n        surgical_lesion: 'no',\n        temp_of_extremities: 'cold',\n        total_protein: 5,\n        peripheral_pulse: 'normal',\n        lesion_1: 0,\n        surgery: 'no'\n      },\n      result: \"\",\n      successMsg: \"\"\n    }; //allows these methods to alter the state of component - the 'result' \n\n    this.handlePredictClick = this.handlePredictClick.bind(this); //allows these methods to alter the state of component - the 'horses' array\n\n    this.getHorses = this.getHorses.bind(this);\n  } //method gets all of the of the horses registered to the account and adds them to the state of the 'horses' array\n  //this is handled in componentWillMount() meaning before any process or rendering begins, getHorses will run. This ensures our array \n  //has the horse values before anything else happens\n\n\n  //componentWillMount() runs before any other code.  The get account horses into array is the first process to be carried out.\n  componentWillMount() {\n    this.getHorses();\n  } //Render of content to browser\n\n\n  render() {\n    //creating objects from the current state. This allows access to its values. \n    //This can also be done without declaring an object this.state.value eg. \"this.state.horses.map\"\n    //Both methods are used.\n    const isLoading = this.state.isLoading;\n    const formData = this.state.formData;\n    const result = this.state.result;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"Colic Predictor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Horse Name // Passport Number // Client Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"select\",\n                value: formData.horse_id,\n                name: \"horse_id\",\n                onChange: (this.handleChange, this.handleChangePickingHorse),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  children: \"Pick Horse\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 19\n                }, this), this.state.horses.map(horse => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: horse.horse_id,\n                  children: [horse.horse_name, \"   // \", horse.passport_no, \" //  \", horse.client_name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 386,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Packed Cell Volume\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"select\",\n                value: formData.packed_cell_volume,\n                name: \"packed_cell_volume\",\n                onChange: this.handleChange,\n                children: packed_cell_volumes\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Pulse Rate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"select\",\n                value: formData.pulse,\n                name: \"pulse\",\n                onChange: this.handleChange,\n                children: pulses\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Surgical Lesion\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 420,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"select\",\n                value: formData.surgical_lesion,\n                name: \"surgical_lesion\",\n                onChange: this.handleChange,\n                children: surgical_lesions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Temp. of Extremities\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"select\",\n                value: formData.temp_of_extremities,\n                name: \"temp_of_extremities\",\n                onChange: this.handleChange,\n                children: temp_of_extremitiess\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Total Protein Count\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"select\",\n                value: formData.total_protein,\n                name: \"total_protein\",\n                onChange: this.handleChange,\n                children: total_proteins\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Peripheral Pulse\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"select\",\n                value: formData.peripheral_pulse,\n                name: \"peripheral_pulse\",\n                onChange: this.handleChange,\n                children: peripheral_pulses\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Lesion\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                name: \"lesion_1\",\n                value: formData.lesion_1,\n                onChange: this.handleChange,\n                maxLength: \"6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Surgery\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"select\",\n                value: formData.surgery,\n                name: \"surgery\",\n                onChange: this.handleChange,\n                children: surgerys\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                block: true,\n                variant: \"success\",\n                disabled: isLoading,\n                onClick: !isLoading ? this.handlePredictClick : null,\n                children: isLoading ? 'Making prediction' : 'Predict'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 499,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                block: true,\n                variant: \"danger\",\n                disabled: isLoading,\n                onClick: this.handleCancelClick,\n                children: \"Reset prediction\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), result === \"\" ? null : /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            className: \"result-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              id: \"result\",\n              children: [\"Percentage chance of survival : \", result, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: this.state.successMsg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 528,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              block: true,\n              variant: \"warning\",\n              disabled: isLoading,\n              onClick: this.handlePredictionRecording,\n              children: \"Record Prediciton\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this);\n  }\n\n} //establishing context state for user\n\n\nInputForm.contextType = MyContext;\nInputForm.contextType = MyContext; //---------------\n\nexport default InputForm;","map":{"version":3,"sources":["C:/Users/oscar/Dropbox/Semester 3/Colic Web App/40316282_FINAL/my-app/src/components/InputForm.jsx"],"names":["React","Component","Form","Col","Container","Row","Button","MyContext","Axios","packed_cell_volumes","i","toFixed","push","pulses","surgical_lesions_values","surgical_lesions","length","temp_of_extremitiess_values","temp_of_extremitiess","total_proteins","peripheral_pulses_values","peripheral_pulses","surgerys_values","surgerys","InputForm","constructor","props","getHorses","loginToken","localStorage","getItem","defaults","headers","common","data","get","console","log","user","success","setState","state","isAuth","horses","handlePredictionRecording","rootState","context","theUser","email","isLoading","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","params","horse_id","formData","user_id","horse_name","prediction","result","packed_cell_volume","pulse","surgical_lesion","temp_of_extremities","total_protein","peripheral_pulse","lesion_1","surgery","post","then","response","message","successMsg","catch","error","handleChange","event","value","target","name","handleChangePickingHorse","horseName","map","horse","horseNameString","toString","horseNameString_","replace","handlePredictClick","fetch","method","body","JSON","stringify","json","handleCancelClick","passport_no","client_name","bind","componentWillMount","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './InputForm.css';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap';\r\nimport { MyContext } from '../contexts/MyContext'\r\nimport Axios from 'axios'\r\n\r\n\r\n\r\n\r\n//Reference is taken from : https://towardsdatascience.com/create-a-complete-machine-learning-web-application-using-react-and-flask-859340bddb33\r\n//This template is reversed engineered to suit our application needs\r\n\r\n\r\n\r\n//Creation of form select data. Using for loops to generate numeric array for dropdown form select data control\r\n//Highest and lowest values plus a rough margin above and below\r\n//20.0 - 90.0\r\nvar packed_cell_volumes = []\r\nfor (var i = 20; i <= 90; i = +(i + 1).toFixed(1)) {\r\n  packed_cell_volumes.push(<option key={i} value={i}>{i}</option>);\r\n}\r\n\r\n//Creation of form select data. Using for loops to generate numeric array for dropdown form select data control\r\n//Highest and lowest values plus a rough margin above and below\r\n//30.0 to 200.0\r\nvar pulses = []\r\nfor (var i = 30; i <= 200; i = +(i + 1).toFixed(1)) {\r\n  pulses.push(<option key={i} value={i}>{i}</option>);\r\n}\r\n\r\n\r\n//Creation of form select data. For the form data to present we need to push the html/jsx into an array. It will not display if it is just an array of strings. \r\n//It needs to be fully formatted as the 'select' syntax within the array\r\n//contains 'yes' or 'no'\r\nvar surgical_lesions_values = [\"yes\", \"no\"]\r\nvar surgical_lesions = []\r\nfor (var i = 0; i <= surgical_lesions_values.length - 1; i++) {\r\n  surgical_lesions.push(<option key={surgical_lesions_values[i]} value={surgical_lesions_values[i]}> {surgical_lesions_values[i]} </option>);\r\n}\r\n\r\n//Creation of form select data. For the form data to present we need to push the html/jsx into an array. It will not display if it is just an array of strings. \r\n//It needs to be fully formatted as the 'select' syntax within the array\r\n//contains 'cool', 'normal', 'cold', 'warm'\r\nvar temp_of_extremitiess_values = [\"cold\", \"cool\", \"normal\", \"warm\"]\r\nvar temp_of_extremitiess = []\r\nfor (var i = 0; i <= temp_of_extremitiess_values.length - 1; i++) {\r\n  temp_of_extremitiess.push(<option key={temp_of_extremitiess_values[i]} value={temp_of_extremitiess_values[i]}> {temp_of_extremitiess_values[i]} </option>);\r\n}\r\n\r\n\r\n//Creation of form select data. Using for loops to generate numeric array for dropdown form select data control\r\n//Highest and lowest values plus a rough margin above and below\r\n//1-100\r\nvar total_proteins = []\r\nfor (var i = 1; i <= 100; i = +(i + 1).toFixed(1)) {\r\n  total_proteins.push(<option key={i} value={i}>{i}</option>);\r\n}\r\n\r\n//Creation of form select data. For the form data to present we need to push the html/jsx into an array. It will not display if it is just an array of strings. \r\n//It needs to be fully formatted as the 'select' syntax within the array\r\n//contains 'reduced', 'normal', 'absent' or 'increased'\r\nvar peripheral_pulses_values = [\"absent\", \"reduced\", \"normal\", \"increased\"]\r\nvar peripheral_pulses = []\r\nfor (var i = 0; i <= peripheral_pulses_values.length - 1; i++) {\r\n  peripheral_pulses.push(<option key={peripheral_pulses_values[i]} value={peripheral_pulses_values[i]}> {peripheral_pulses_values[i]} </option>);\r\n}\r\n\r\n//Creation of form select data. For the form data to present we need to push the html/jsx into an array. It will not display if it is just an array of strings. \r\n//It needs to be fully formatted as the 'select' syntax within the array\r\n//contains yes or no\r\nvar surgerys_values = [\"yes\", \"no\"]\r\nvar surgerys = []\r\nfor (var i = 0; i <= surgerys_values.length - 1; i++) {\r\n  surgerys.push(<option key={surgerys_values[i]} value={surgerys_values[i]}> {surgerys_values[i]} </option>);\r\n}\r\n\r\n\r\n\r\n\r\nclass InputForm extends Component {\r\n\r\n  //Importing the MyContext.js state values. We are interested in theUser as we are adding horses specific to the user account.\r\n  //MyContext is acting as a parental component. It passes its prop values down to this component. React is one directional meaning that props \r\n  //cannot be passed back up to the parent.\r\n  static contextType = MyContext;\r\n\r\n\r\n  //constructor defines the initial state\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n\r\n    //default values when app is opened - the default state values\r\n    this.state = {\r\n      //isLoading controls the rendering and method processes\r\n      isLoading: false,\r\n      //horses contains all the horses registered to the logged in account\r\n      //HARD CODED FOR DEMO PURPOSES\r\n      horses: [{horse_name : \"Kevin\",  passport_no : \"900000333\", client_name : \"Donald Trump\"}],\r\n      \r\n\r\n      //default values form values - starts empty. Values are altered by the rendered input form below.\r\n      formData: {\r\n        horse_name: 'horse',\r\n        packed_cell_volume: 20,\r\n        pulse: 30,\r\n        surgical_lesion: 'no',\r\n        temp_of_extremities: 'cold',\r\n        total_protein: 5,\r\n        peripheral_pulse: 'normal',\r\n        lesion_1: 0,\r\n        surgery: 'no',\r\n      },\r\n      result: \"\",\r\n      successMsg :\"\"\r\n\r\n    };\r\n    //allows these methods to alter the state of component - the 'result' \r\n    this.handlePredictClick = this.handlePredictClick.bind(this);\r\n    //allows these methods to alter the state of component - the 'horses' array\r\n    this.getHorses = this.getHorses.bind(this);\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  //method gets all of the of the horses registered to the account and adds them to the state of the 'horses' array\r\n  //this is handled in componentWillMount() meaning before any process or rendering begins, getHorses will run. This ensures our array \r\n  //has the horse values before anything else happens\r\n  getHorses = async () => {\r\n\r\n    //gets the login token cookie from our browser local storage. This will only be present if successfully logged in. It is a JWT token.\r\n    const loginToken = localStorage.getItem('loginToken');\r\n\r\n    // If inside the local-storage has the the JWT token (and is therefore logged in)\r\n    if (loginToken) {\r\n\r\n      //Adding JWT token to axios default header - this allows access to the database. For security and access purposes. You need the token to be able \r\n      //to request the API for database information.\r\n      Axios.defaults.headers.common['Authorization'] = 'bearer ' + loginToken;\r\n\r\n      // Fetching the users registered horses\r\n      const { data } = await Axios.get('http://localhost/php-colicapp/user-horses.php');\r\n\r\n      console.log(data)\r\n      console.log(data.user)\r\n\r\n      // If user information is successfully received, add the horses to the 'horses' array in state\r\n      if (data.success && data.user) {\r\n        this.setState({\r\n          ...this.state,\r\n          isAuth: true,\r\n          horses: data.user\r\n\r\n        });\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //sends the prediction to our database\r\n  handlePredictionRecording = () => {\r\n\r\n    //gets the user info from mycontext stat.\r\n    const { rootState } = this.context;\r\n    const { theUser } = rootState;\r\n    console.log(theUser.email)\r\n    this.setState({ isLoading: true });\r\n\r\n    //get time and date assigned to variable\r\n    const today = new Date();\r\n    const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n    const time = today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();\r\n\r\n    //the information that will be posted to our database using axios\r\n    const params = {\r\n\r\n      horse_id: this.state.formData.horse_id,\r\n      user_id: theUser.user_id,\r\n      horse_name: this.state.formData.horse_name,\r\n      prediction: this.state.result,\r\n      date: date,\r\n      time: time,\r\n      packed_cell_volume: this.state.formData.packed_cell_volume,\r\n      pulse: this.state.formData.pulse,\r\n      surgical_lesion: this.state.formData.surgical_lesion,\r\n      temp_of_extremities: this.state.formData.temp_of_extremities,\r\n      total_protein: this.state.formData.total_protein,\r\n      peripheral_pulse: this.state.formData.peripheral_pulse,\r\n      lesion_1: this.state.formData.lesion_1,\r\n      surgery: this.state.formData.surgery\r\n\r\n    };\r\n\r\n    console.log(params.horse_id, params.horse_name,\r\n      params.prediction, params.date, params.time,\r\n      params.packed_cell_volume, params.pulse, params.surgical_lesion,\r\n      params.temp_of_extremities, params.total_protein, params.peripheral_pulse,\r\n      params.lesion_1, params.surgery)\r\n\r\n    //posting our parameters to the php API which will update the sql database\r\n    Axios.post(\"http://localhost/php-colicapp/saveprediction.php\", (params))\r\n      .then((response) => {\r\n        console.log(response.data.message);\r\n        this.setState({successMsg : response.data.message})\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n       \r\n      });\r\n    this.setState({ isLoading: false });\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  //when data changes live on the input form, this function updates the values of our from data\r\n  //this method handles all form changes apart from 'horse_name' and 'horse_id'\r\n  handleChange = (event) => {\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n    var formData = this.state.formData;\r\n    formData[name] = value;\r\n    this.setState({\r\n      formData\r\n    });\r\n  }\r\n\r\n\r\n  //The horses array state now holds all of the horses registered to the logged in account.\r\n  //These are then inputted into a selection dropdown in the input form. This controls data & allows us to assign a better architecture to each horses recording.\r\n  //When the form is submitted, this method attains the value and name of the input field (drop down menu of horses)\r\n  //these two values are used to set the 'horse_id' value\r\n  //A for loop is used to run through the 'horses' array and if the 'horse_id' matches, that specific 'horse_name' is retrieved and then used to change the 'formData'.\r\n  //This method is run every time a new selection is made form the 'horse name' field of our input form. It is real time state update.\r\n  handleChangePickingHorse = (event) => {\r\n\r\n    //When the name selection changes on the input form, the change event retrieves the value and name of the field.\r\n    //These fields allow us to retrieve the 'horse_id' value\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n\r\n    console.log(value);\r\n    console.log(name);\r\n\r\n    //the 'horse_id' value retrieved by the selection change of the 'horse name' field is put through a loop.\r\n    //this loop runs through the 'horses' array. When the matching horse is found, the 'horse_name' is returned.\r\n    const horseName = this.state.horses.map((horse) => {\r\n      if (horse.horse_id === value)\r\n        return horse.horse_name\r\n\r\n    })\r\n\r\n    //above code returns the result in a single value array. We need to parse it into a String value.\r\n    let horseNameString = horseName.toString();\r\n\r\n    //After changing the horseName to a string, it includes the comma of the array structure. This is removed below.\r\n    var horseNameString_ = horseNameString.replace(/,/g, '');\r\n\r\n    console.log(horseNameString_)\r\n\r\n\r\n\r\n    //using the 'user_id' and 'horse_name' values to update our current form state.\r\n    var formData = this.state.formData;\r\n    formData.horse_name = horseNameString_;\r\n    formData.horse_id = value;\r\n    this.setState({\r\n      formData\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n//This method is called when the 'predict' button is clicked.\r\n//The current state of the form data object is created\r\n//fetch is used to retrieve our prediction API that is house in our FLASK virtual environment\r\n//The form data variable is then posted to the API in JSON format.\r\n//The response is then used to update the 'result' state.\r\n//This gets us the prediction result from our current formData state.\r\n\r\n  handlePredictClick = () => {\r\n\r\n    const formData = this.state.formData;\r\n    this.setState({ isLoading: true });\r\n    fetch('http://127.0.0.1:5000/prediction/',\r\n      {\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        method: 'POST',\r\n        body: JSON.stringify(formData)\r\n      })\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        this.setState({\r\n          result: response.result,\r\n          isLoading: false,\r\n\r\n\r\n        });\r\n\r\n      });\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //Cancel click resets our result state to null.\r\n  handleCancelClick = (event) => {\r\n    this.setState({ result: \"\" });\r\n  }\r\n\r\n  //componentWillMount() runs before any other code.  The get account horses into array is the first process to be carried out.\r\n  componentWillMount() {\r\n    this.getHorses();\r\n\r\n  }\r\n\r\n\r\n  //Render of content to browser\r\n  render() {\r\n\r\n\r\n    //creating objects from the current state. This allows access to its values. \r\n    //This can also be done without declaring an object this.state.value eg. \"this.state.horses.map\"\r\n    //Both methods are used.\r\n    const isLoading = this.state.isLoading;\r\n    const formData = this.state.formData;\r\n    const result = this.state.result;\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n\r\n      <Container>\r\n\r\n\r\n        <div>\r\n          <h1 className=\"title\">Colic Predictor</h1>\r\n        </div>\r\n        <div className=\"content\">\r\n          <Form>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Horse Name // Passport Number // Client Name</Form.Label>\r\n                {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'horse_id' and 'horse_name' */}\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.horse_id}\r\n                  name=\"horse_id\"\r\n                  onChange={this.handleChange, this.handleChangePickingHorse}>\r\n                    {/* A loop is used to output the 'horses' array to a drop-down selection menu. Client name and horse passport number are also displayed to \r\n                    make sure horses with the same name can be differentiated  */}\r\n                  <option>Pick Horse</option>\r\n                  {this.state.horses.map((horse) => (\r\n                    <option value={horse.horse_id}>{horse.horse_name}   // {horse.passport_no} //  {horse.client_name}</option>\r\n                  ))}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n\r\n\r\n\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Packed Cell Volume</Form.Label>\r\n                {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'packed_cell_volume' */}\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.packed_cell_volume}\r\n                  name=\"packed_cell_volume\"\r\n                  onChange={this.handleChange}>\r\n                  {packed_cell_volumes}\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Pulse Rate</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.pulse}\r\n                  name=\"pulse\"\r\n                  onChange={this.handleChange}>\r\n                  {pulses}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Surgical Lesion</Form.Label>\r\n                {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'surgical_lesion' */}\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.surgical_lesion}\r\n                  name=\"surgical_lesion\"\r\n                  onChange={this.handleChange}>\r\n                  {surgical_lesions}\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Temp. of Extremities</Form.Label>\r\n                {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'temp_of_extremities' */}\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.temp_of_extremities}\r\n                  name=\"temp_of_extremities\"\r\n                  onChange={this.handleChange}>\r\n                  {temp_of_extremitiess}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Total Protein Count</Form.Label>\r\n                {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'total_protein' */}\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.total_protein}\r\n                  name=\"total_protein\"\r\n                  onChange={this.handleChange}>\r\n                  {total_proteins}\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Peripheral Pulse</Form.Label>\r\n                 {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'peripheral_pulse' */}\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.peripheral_pulse}\r\n                  name=\"peripheral_pulse\"\r\n                  onChange={this.handleChange}>\r\n                  {peripheral_pulses}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Lesion</Form.Label>\r\n                {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'lesion_1' */}\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"lesion_1\"\r\n                  value={formData.lesion_1}\r\n                  onChange={this.handleChange}\r\n                  maxLength=\"6\">\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Surgery</Form.Label>\r\n                {/* from control name and value is taken to fill out the \"formData\" when the form input select value changes in real time */}\r\n                {/* used to obtain 'surgery' */}\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={formData.surgery}\r\n                  name=\"surgery\"\r\n                  onChange={this.handleChange}>\r\n                  {surgerys}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Row>\r\n              <Col>\r\n              {/* Button is used to run our prediction API through 'handlePredictClick'. If loading, the button text changes to 'Making Prediction' */}\r\n                <Button\r\n                  block\r\n                  variant=\"success\"\r\n                  disabled={isLoading}\r\n                  onClick={!isLoading ? this.handlePredictClick : null}>\r\n                  {isLoading ? 'Making prediction' : 'Predict'}\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n              {/* Button is used to reset the 'result' state output to nothing. This resets the forms result. */}\r\n                <Button\r\n                  block\r\n                  variant=\"danger\"\r\n                  disabled={isLoading}\r\n                  onClick={this.handleCancelClick}>\r\n                  Reset prediction\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n\r\n          {/* If the 'result' state is not null render this : */}\r\n          {result === \"\" ? null :\r\n            (<Row>\r\n              {/* Output result */}\r\n              <Col className=\"result-container\">\r\n                <h5 id=\"result\">Percentage chance of survival : {result}%</h5>\r\n\r\n                 {/* These will appear if a success message or error message state has value  */}\r\n                  <h6>{this.state.successMsg}</h6>\r\n\r\n                {/* Button when clicked sends the prediction to our database. This is done through 'handlePredictionRecording' */}\r\n                  <Button\r\n                    block\r\n                    variant=\"warning\"\r\n                    disabled={isLoading}\r\n                    onClick={this.handlePredictionRecording}>\r\n                    Record Prediciton\r\n                  </Button>\r\n\r\n                \r\n              </Col>\r\n            </Row>)\r\n          }\r\n        </div>\r\n\r\n\r\n      </Container>\r\n\r\n\r\n\r\n\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n//establishing context state for user\r\nInputForm.contextType = MyContext;\r\n\r\n\r\n\r\n//---------------\r\n\r\nexport default InputForm;\r\n"]},"metadata":{},"sourceType":"module"}