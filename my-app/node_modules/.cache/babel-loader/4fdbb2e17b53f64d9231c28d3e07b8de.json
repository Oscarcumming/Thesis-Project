{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oscar\\\\Dropbox\\\\Semester 3\\\\Colic Web App\\\\40316282_FINAL\\\\my-app\\\\src\\\\components\\\\Register.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { MyContext } from '../contexts/MyContext';\nimport './Register.css'; //Functional reference is taken from : https://www.w3jar.com/react-js-php-mysql-db-login-registration-system/\n//Used to register an account to the sql database\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Register() {\n  _s();\n\n  //gets the user info from MyContext state.\n  //rootstate contains theUser, isAuth, isLoggedIn to control and access the signed in account values.\n  //We are interested in the registerUser method.\n  const {\n    registerUser\n  } = useContext(MyContext); //an object that declares the initial values : email, name and password\n\n  const initialState = {\n    userInfo: {\n      name: '',\n      email: '',\n      password: ''\n    },\n    errorMsg: '',\n    successMsg: ''\n  }; //the 'initialState' object is then turned into a state value that can be accessed. It is done this way because it is not a component but a functional component\n\n  const [state, setState] = useState(initialState); // On Submit the Registration Form\n\n  const submitForm = async event => {\n    event.preventDefault(); //using the current state of 'userInfo' as a parameter into the 'registerUser' method in 'MyContext.js' \n    //If the post request is successful and the user is added, assign success message to the 'successMsg' state\n\n    const data = await registerUser(state.userInfo);\n\n    if (data.success) {\n      setState({ ...initialState,\n        successMsg: data.message\n      });\n    } //Else if the post request is unsuccessful and the user is not added, assign error message to the 'errorMsg' state\n    else {\n      setState({ ...state,\n        successMsg: '',\n        errorMsg: data.message\n      });\n    }\n  }; //when data changes live on the input form, this function updates the values of our from data. It extracts the 'name' and 'value' of the input field \n  //and uses this to set the corresponding state values\n\n\n  const onChangeValue = e => {\n    setState({ ...state,\n      userInfo: { ...state.userInfo,\n        [e.target.name]: e.target.value\n      }\n    });\n  }; // creating the variables to hold the 'successMsg' and 'errorMsg'\n\n\n  let successMsg = '';\n  let errorMsg = ''; //if errorMsg state has a value, update the errorMsg variable contain a div with the new errorMsg state\n\n  if (state.errorMsg) {\n    errorMsg = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-msg\",\n      children: state.errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 20\n    }, this);\n  } //if successMsg state has a value, update the successMsg variable contain a div with the new errorMsg state\n\n\n  if (state.successMsg) {\n    successMsg = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-msg\",\n      children: state.successMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 22\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"REGISTER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"contentR\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitForm,\n        noValidate: true,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"exampleFormControlInput1\",\n            class: \"form-label\",\n            children: \"Full Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            class: \"form-control\",\n            name: \"name\",\n            required: true,\n            type: \"text\",\n            value: state.userInfo.name,\n            onChange: onChangeValue,\n            placeholder: \"Enter your name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"exampleFormControlInput1\",\n            class: \"form-label\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            class: \"form-control\",\n            name: \"email\",\n            required: true,\n            type: \"email\",\n            value: state.userInfo.email,\n            onChange: onChangeValue,\n            placeholder: \"Enter your email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            class: \"form-label\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            class: \"form-control\",\n            name: \"password\",\n            required: true,\n            type: \"password\",\n            value: state.userInfo.password,\n            onChange: onChangeValue,\n            placeholder: \"Enter your password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), errorMsg, successMsg, /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          class: \"btn btn-outline-primary form-control\",\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"justify-content-end\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Register, \"oGR+2xs75HrmnZveCYRmzytCJmI=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["C:/Users/oscar/Dropbox/Semester 3/Colic Web App/40316282_FINAL/my-app/src/components/Register.jsx"],"names":["React","useContext","useState","MyContext","Register","registerUser","initialState","userInfo","name","email","password","errorMsg","successMsg","state","setState","submitForm","event","preventDefault","data","success","message","onChangeValue","e","target","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport { MyContext } from '../contexts/MyContext'\r\nimport './Register.css';\r\n\r\n//Functional reference is taken from : https://www.w3jar.com/react-js-php-mysql-db-login-registration-system/\r\n\r\n//Used to register an account to the sql database\r\nfunction Register() {\r\n\r\n    //gets the user info from MyContext state.\r\n    //rootstate contains theUser, isAuth, isLoggedIn to control and access the signed in account values.\r\n    //We are interested in the registerUser method.\r\n    const {  registerUser } = useContext(MyContext);\r\n\r\n    //an object that declares the initial values : email, name and password\r\n    const initialState = {\r\n        userInfo: {\r\n            name: '',\r\n            email: '',\r\n            password: '',\r\n        },\r\n        errorMsg: '',\r\n        successMsg: '',\r\n    }\r\n\r\n    //the 'initialState' object is then turned into a state value that can be accessed. It is done this way because it is not a component but a functional component\r\n    const [state, setState] = useState(initialState);\r\n\r\n    // On Submit the Registration Form\r\n    const submitForm = async (event) => {\r\n        event.preventDefault();\r\n        //using the current state of 'userInfo' as a parameter into the 'registerUser' method in 'MyContext.js' \r\n        //If the post request is successful and the user is added, assign success message to the 'successMsg' state\r\n        const data = await registerUser(state.userInfo);\r\n        if (data.success) {\r\n            setState({\r\n                ...initialState,\r\n                successMsg: data.message,\r\n            });\r\n        }\r\n        //Else if the post request is unsuccessful and the user is not added, assign error message to the 'errorMsg' state\r\n        else {\r\n            setState({\r\n                ...state,\r\n                successMsg: '',\r\n                errorMsg: data.message\r\n            });\r\n        }\r\n    }\r\n\r\n    //when data changes live on the input form, this function updates the values of our from data. It extracts the 'name' and 'value' of the input field \r\n    //and uses this to set the corresponding state values\r\n    const onChangeValue = (e) => {\r\n        setState({\r\n            ...state,\r\n            userInfo: {\r\n                ...state.userInfo,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    // creating the variables to hold the 'successMsg' and 'errorMsg'\r\n    let successMsg = '';\r\n    let errorMsg = '';\r\n    //if errorMsg state has a value, update the errorMsg variable contain a div with the new errorMsg state\r\n    if (state.errorMsg) {\r\n        errorMsg = <div className=\"error-msg\">{state.errorMsg}</div>;\r\n    }\r\n    //if successMsg state has a value, update the successMsg variable contain a div with the new errorMsg state\r\n    if (state.successMsg) {\r\n        successMsg = <div className=\"success-msg\">{state.successMsg}</div>;\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div>\r\n                <h1 className=\"title\">REGISTER</h1>\r\n            </div>\r\n            <div class=\"contentR\">\r\n                <form onSubmit={submitForm} noValidate>\r\n                    <div class=\"mb-3\">\r\n                        {/* from control name and value is taken to fill out the \"userInfo\" when the form input select value changes in real time -  name */}\r\n                        <label for=\"exampleFormControlInput1\" class=\"form-label\">Full Name</label>\r\n                        <input class=\"form-control\" name=\"name\" required type=\"text\" value={state.userInfo.name} onChange={onChangeValue} placeholder=\"Enter your name\" />\r\n                    </div>\r\n                    <div class=\"mb-3\">\r\n                        {/* from control name and value is taken to fill out the \"userInfo\" when the form input select value changes in real time -  email */}\r\n                        <label for=\"exampleFormControlInput1\" class=\"form-label\">Email</label>\r\n                        <input class=\"form-control\" name=\"email\" required type=\"email\" value={state.userInfo.email} onChange={onChangeValue} placeholder=\"Enter your email\" />\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                        {/* from control name and value is taken to fill out the \"userInfo\" when the form input select value changes in real time -  password */}\r\n                        <label class=\"form-label\">Password</label>\r\n                        <input class=\"form-control\" name=\"password\" required type=\"password\" value={state.userInfo.password} onChange={onChangeValue} placeholder=\"Enter your password\" />\r\n                    </div>\r\n                    {/* These will appear if a success message or error message state has value - basically when the information is sent through 'registerUser' */}\r\n                    {errorMsg}\r\n                    {successMsg}\r\n\r\n                    {/* Button submits the form and then runs 'submitFrom' method */}\r\n                    <button type=\"submit\" class=\"btn btn-outline-primary form-control\">Sign Up</button>\r\n\r\n                </form>\r\n\r\n            </div>\r\n            <div className=\"justify-content-end\">\r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Register;"]},"metadata":{},"sourceType":"module"}